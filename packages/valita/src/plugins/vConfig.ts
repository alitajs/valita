import { ILib } from '@alita/autoimport/dist/types';
import { writeFileSync } from 'fs';
import { join } from 'path';
import { IApi } from 'umi';

export default (api: IApi) => {
  const configDefaults: Record<string, any> = {
    vue: {},
    mfsu: false,
    autoImport: {
      libs: [
        {
          importFrom: 'vue',
          members: [
            'EffectScope',
            'computed',
            'createApp',
            'customRef',
            'defineAsyncComponent',
            'defineComponent',
            'effectScope',
            'getCurrentInstance',
            'getCurrentScope',
            'h',
            'inject',
            'isProxy',
            'isReactive',
            'isReadonly',
            'isRef',
            'markRaw',
            'nextTick',
            'onActivated',
            'onBeforeMount',
            'onBeforeUnmount',
            'onBeforeUpdate',
            'onDeactivated',
            'onErrorCaptured',
            'onMounted',
            'onRenderTracked',
            'onRenderTriggered',
            'onScopeDispose',
            'onServerPrefetch',
            'onUnmounted',
            'onUpdated',
            'provide',
            'reactive',
            'readonly',
            'ref',
            'resolveComponent',
            'resolveDirective',
            'shallowReactive',
            'shallowReadonly',
            'shallowRef',
            'toRaw',
            'toRef',
            'toRefs',
            'triggerRef',
            'unref',
            'useCssModule',
            'useCssVars',
            'useSlots',
            'watch',
            'watchEffect',
            'watchPostEffect',
            'watchSyncEffect',
          ],
        },
      ],
    },
    ...api.userConfig,
  };
  if (api.userConfig.complexRoute) {
    configDefaults.conventionRoutes = {
      // 保留umi的路由，过滤了非page的文件
      exclude: [
        /model\.(j|t)sx?$/,
        /\.test\.(j|t)sx?$/,
        /service\.(j|t)sx?$/,
        /models\//,
        /components\//,
        /services\//,
      ],
    };
  }

  api.onStart(() => {
    // generate dts
    const dts = api.appData.autoImport.map((lib: ILib) => {
      // if (lib.withObj) {
      //   const memberDts = (lib.members || [])
      //     .map(
      //       (member) =>
      //         `${member}: typeof import('${lib.importFrom}')['${member}'],`,
      //     )
      //     .join('\n');
      //   return `const ${lib.withObj} : {\n${memberDts}\n};`;
      // } else
      if (lib.namespaceImport) {
        return `readonly ${lib.namespaceImport}: UnwrapRef<typeof import('${lib.importFrom}')>;`;
      } else if (lib.defaultImport) {
        return `readonly ${lib.defaultImport}: UnwrapRef<typeof import('${lib.importFrom}')['default']>;`;
      } else {
        // readonly $$: UnwrapRef<typeof import('vue/macros')['$$']>
        return (lib.members || [])
          .map(
            (member) =>
              `readonly ${member}:  UnwrapRef<typeof import('${lib.importFrom}')['${member}']>;`,
          )
          .join('\n');
      }
    });

    const content =
      `
// generated by valita
// for vue template auto import
import { UnwrapRef } from 'vue'
declare module 'vue' {
  interface ComponentCustomProperties {
${dts.join('\n')}
}}
export {}
    `.trim() + `\n`;
    writeFileSync(
      join(api.paths.cwd, 'autoVueTemplate.d.ts'),
      content,
      'utf-8',
    );
  });

  api.modifyConfig((memo: any) => {
    Object.keys(configDefaults).forEach((key) => {
      if (key === 'alias') {
        memo[key] = { ...memo[key], ...configDefaults[key] };
      } else {
        memo[key] = configDefaults[key];
      }
    });
    // umi4 开发环境不允许配置为 './'
    if (process.env.NODE_ENV === 'development' && memo.publicPath === './') {
      memo.publicPath = '/';
    }
    return memo;
  });
};
